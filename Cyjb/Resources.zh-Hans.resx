<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AmbiguousMatchField" xml:space="preserve">
    <value>找到多个有指定名称且与指定绑定约束匹配的字段。</value>
    <comment>找到多个有指定名称且与指定绑定约束匹配的字段。</comment>
  </data>
  <data name="AmbiguousMatchMethod" xml:space="preserve">
    <value>找到多个有指定名称且与指定绑定约束匹配的方法。</value>
    <comment>找到多个有指定名称且与指定绑定约束匹配的方法。</comment>
  </data>
  <data name="AmbiguousMatchProperty" xml:space="preserve">
    <value>找到多个有指定名称且与指定绑定约束匹配的属性。</value>
    <comment>找到多个有指定名称且与指定绑定约束匹配的属性。</comment>
  </data>
  <data name="ArgumentMinMaxValue" xml:space="preserve">
    <value>“{0}”不能大于“{1}”。</value>
    <comment>参数上下界不能颠倒。</comment>
  </data>
  <data name="ArgumentMustBePositive" xml:space="preserve">
    <value>“{0}”必须大于 0。</value>
    <comment>参数值必须大于 0。</comment>
  </data>
  <data name="ArgumentNegative" xml:space="preserve">
    <value>“{0}”不能为负。</value>
    <comment>参数值不能为负。</comment>
  </data>
  <data name="ArgumentOutOfRange" xml:space="preserve">
    <value>“{0}”超出范围。</value>
    <comment>参数超出范围。</comment>
  </data>
  <data name="ArgumentOutOfRange_Between" xml:space="preserve">
    <value>“{0}”必须位于“{1}”和“{2}”之间。</value>
    <comment>参数超出范围。</comment>
  </data>
  <data name="ArgumentOutOfRange_Count" xml:space="preserve">
    <value>计数必须为正，且计数必须引用 string/array/collection 内的位置。</value>
    <comment>长度超出范围。</comment>
  </data>
  <data name="ArgumentOutOfRange_Index" xml:space="preserve">
    <value>索引超出范围。必须为非负值并小于集合大小。</value>
    <comment>索引超出范围。</comment>
  </data>
  <data name="ArgumentWrongType" xml:space="preserve">
    <value>参数的值“{0}”不是“{1}”类型。</value>
    <comment>参数值不是有效类型。</comment>
  </data>
  <data name="ArrayNonZeroLowerBound" xml:space="preserve">
    <value>数组的下限必须为 0。</value>
    <comment>数组的下限必须为 0。</comment>
  </data>
  <data name="ArrayTooSmall" xml:space="preserve">
    <value>目标数组的长度不足，请检查数组索引和长度。</value>
    <comment>目标数组太小。</comment>
  </data>
  <data name="CannotCastNullToValueType" xml:space="preserve">
    <value>null 不能转换为值类型。</value>
    <comment>null 不能转换为值类型。</comment>
  </data>
  <data name="CannotInferenceGenericArguments" xml:space="preserve">
    <value>无法从参数中推导出方法的类型实参。</value>
    <comment>无效的泛型参数推断。</comment>
  </data>
  <data name="CollectionCountDiffer" xml:space="preserve">
    <value>集合的元素数必须与当前集合相同。</value>
    <comment>集合元素数必须与当前集合相同。</comment>
  </data>
  <data name="CollectionEmpty" xml:space="preserve">
    <value>“{0}”不能为空。</value>
    <comment>集合不能为空。</comment>
  </data>
  <data name="CollectionItemCompareFailed" xml:space="preserve">
    <value>未能比较集合中的两个元素。</value>
    <comment>比较集合元素失败。</comment>
  </data>
  <data name="CollectionItemNull" xml:space="preserve">
    <value>“{0}”中存在 null 元素。</value>
    <comment>集合中存在 null 元素。</comment>
  </data>
  <data name="DuplicateName" xml:space="preserve">
    <value>具有相同名称的参数已经存在。</value>
    <comment>参数名相同。</comment>
  </data>
  <data name="ExtraJunkAtEnd" xml:space="preserve">
    <value>字符串的末尾有其他无法分析的字符。</value>
    <comment>字符串的末尾有其他无法分析的字符。</comment>
  </data>
  <data name="InvalidBase" xml:space="preserve">
    <value>基不在 2 至 36 之间。</value>
    <comment>无效的基。</comment>
  </data>
  <data name="InvalidCast" xml:space="preserve">
    <value>从“{0}”到“{1}”的类型转换无效。</value>
    <comment>一种类型不能转换为另一种类型。</comment>
  </data>
  <data name="InvalidElementType" xml:space="preserve">
    <value>目标元素类型与集合项的类型不兼容。</value>
    <comment>目标元素类型与集合项的类型不兼容。</comment>
  </data>
  <data name="InvalidThreshold" xml:space="preserve">
    <value>指定的阈值超出范围。</value>
    <comment>阈值超出范围。</comment>
  </data>
  <data name="MethodNotSupported" xml:space="preserve">
    <value>不支持指定的方法。</value>
    <comment>方法不被支持。</comment>
  </data>
  <data name="MultidimensionalArrayNotSupported" xml:space="preserve">
    <value>只支持一维数组。</value>
    <comment>多维数组不被支持。</comment>
  </data>
  <data name="MultidimensionalArrayNotSupported_Param" xml:space="preserve">
    <value>参数“{0}”只支持一维数组。</value>
    <comment>多维数组不被支持。</comment>
  </data>
  <data name="MustBeDelegate" xml:space="preserve">
    <value>提供的类型“{0}”必须从委托派生。</value>
    <comment>类型必须从委托派生。</comment>
  </data>
  <data name="MustBeEnum" xml:space="preserve">
    <value>提供的类型必须是枚举类型。</value>
    <comment>必须是枚举类型。</comment>
  </data>
  <data name="MustBeEnum_Type" xml:space="preserve">
    <value>提供的类型“{0}”必须是枚举类型。</value>
    <comment>必须是枚举类型。</comment>
  </data>
  <data name="MustContainValidInfo" xml:space="preserve">
    <value>此字符串中必须指定可用于分析的有效信息。</value>
    <comment>字符串不包含可用信息。</comment>
  </data>
  <data name="NamedParamTooBig" xml:space="preserve">
    <value>命名的参数数组不能大于变量数组。</value>
    <comment>命名参数数组太长。</comment>
  </data>
  <data name="NeedGenericMethodDefinition" xml:space="preserve">
    <value>“{0}”不是泛型方法定义。</value>
    <comment>不表示泛型方法定义。</comment>
  </data>
  <data name="NegativeUnsigned" xml:space="preserve">
    <value>该字符串正被当作无符号数字进行分析，因此不能带有负号。</value>
    <comment>无符号数的字符串不能包含负号。</comment>
  </data>
  <data name="NoParsibleDigits" xml:space="preserve">
    <value>未能找到任何可识别的数字。</value>
    <comment>未能找到任何可识别的数字。</comment>
  </data>
  <data name="OverflowByte" xml:space="preserve">
    <value>值对于 Byte 太大或太小。</value>
    <comment>值对于 Byte 太大或太小。</comment>
  </data>
  <data name="OverflowInt16" xml:space="preserve">
    <value>值对于 Int16 太大或太小。</value>
    <comment>值对于 Int16 太大或太小。</comment>
  </data>
  <data name="OverflowInt32" xml:space="preserve">
    <value>值对于 Int32 太大或太小。</value>
    <comment>值对于 Int32 太大或太小。</comment>
  </data>
  <data name="OverflowInt64" xml:space="preserve">
    <value>值对于 Int64 太大或太小。</value>
    <comment>值对于 Int64 太大或太小。</comment>
  </data>
  <data name="OverflowSByte" xml:space="preserve">
    <value>值对于 SByte 太大或太小。</value>
    <comment>值对于 SByte 太大或太小。</comment>
  </data>
  <data name="OverflowUInt16" xml:space="preserve">
    <value>值对于 UInt16 太大或太小。</value>
    <comment>值对于 UInt16 太大或太小。</comment>
  </data>
  <data name="OverflowUInt32" xml:space="preserve">
    <value>值对于 UInt32 太大或太小。</value>
    <comment>值对于 UInt32 太大或太小。</comment>
  </data>
  <data name="OverflowUInt64" xml:space="preserve">
    <value>值对于 UInt64 太大或太小。</value>
    <comment>值对于 UInt64 太大或太小。</comment>
  </data>
  <data name="StreamClosed" xml:space="preserve">
    <value>不能从关闭的“{0}”中读取。</value>
    <comment>流已关闭。</comment>
  </data>
  <data name="TypeContainsGenericParameters" xml:space="preserve">
    <value>类型“{0}”包含泛型参数。</value>
    <comment>类型包含泛型参数。</comment>
  </data>
  <data name="TypeMissingDefaultConstructor" xml:space="preserve">
    <value>类型“{0}”没有默认构造函数。</value>
    <comment>类型不包含默认构造函数。</comment>
  </data>
  <data name="UnboundGenParam" xml:space="preserve">
    <value>不能对 ContainsGenericParameters 为 true 的类型或方法执行后期绑定操作。</value>
    <comment>不能对包含未赋值的泛型类型参数的类型和方法进行后期绑定。</comment>
  </data>
  <data name="UniqueValue_Ambig" xml:space="preserve">
    <value>[冲突]</value>
    <comment>冲突的文本。</comment>
  </data>
  <data name="UniqueValue_Empty" xml:space="preserve">
    <value>[空]</value>
    <comment>空的文本。</comment>
  </data>
  <data name="UniqueValue_Unique" xml:space="preserve">
    <value>[唯一 {0}]</value>
    <comment>唯一的文本。</comment>
  </data>
  <data name="UnorderedHashCode_EqualityNotSupported" xml:space="preserve">
    <value>UnorderedHashCode 是一个可变的结构体，不应与其它  UnorderedHashCode 比较。</value>
    <comment>UnorderedHashCode 不支持相等比较。</comment>
  </data>
  <data name="UnorderedHashCode_HashCodeNotSupported" xml:space="preserve">
    <value>UnorderedHashCode 是一个可变的结构体，不应与其它  UnorderedHashCode 比较。使用 ToHashCode 来获取计算的哈希代码。</value>
    <comment>UnorderedHashCode 不支持 HashCode。</comment>
  </data>
  <data name="Unreachable" xml:space="preserve">
    <value>不应被执行到的代码。</value>
    <comment>代码不应到达这里的异常。</comment>
  </data>
</root>