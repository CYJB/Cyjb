<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AmbiguousMatchField" xml:space="preserve">
    <value>More than one field is found with the specified name and matching the specified binding constraints.</value>
    <comment>找到多个有指定名称且与指定绑定约束匹配的字段。</comment>
  </data>
  <data name="AmbiguousMatchMethod" xml:space="preserve">
    <value>More than one method is found with the specified name and matching the specified binding constraints.</value>
    <comment>找到多个有指定名称且与指定绑定约束匹配的方法。</comment>
  </data>
  <data name="AmbiguousMatchProperty" xml:space="preserve">
    <value>More than one property is found with the specified name and matching the specified binding constraints.</value>
    <comment>找到多个有指定名称且与指定绑定约束匹配的属性。</comment>
  </data>
  <data name="AmbiguousUserDefinedConverter" xml:space="preserve">
    <value>Ambiguous user-defined converter found when convert '{0}' to '{1}'.</value>
    <comment>找到多个用户自定义的类型转换。</comment>
  </data>
  <data name="ArgumentMinMaxValue" xml:space="preserve">
    <value>'{0}' cannot be greater than '{1}'.</value>
    <comment>参数上下界不能颠倒。</comment>
  </data>
  <data name="ArgumentMustBePositive" xml:space="preserve">
    <value>'{0}' must be greater than zero.</value>
    <comment>参数值必须大于 0。</comment>
  </data>
  <data name="ArgumentNegative" xml:space="preserve">
    <value>'{0}' can not be negative.</value>
    <comment>参数值不能为负。</comment>
  </data>
  <data name="ArgumentOutOfRange" xml:space="preserve">
    <value>'{0}' out of range.</value>
    <comment>参数超出范围。</comment>
  </data>
  <data name="ArgumentOutOfRange_Between" xml:space="preserve">
    <value>'{0}' must be between '{1}' and '{2}'.</value>
    <comment>参数超出范围。</comment>
  </data>
  <data name="ArgumentOutOfRange_Count" xml:space="preserve">
    <value>Count must be positive and count must refer to a location within the string/array/collection.</value>
    <comment>长度超出范围。</comment>
  </data>
  <data name="ArgumentOutOfRange_Index" xml:space="preserve">
    <value>Index was out of range. Must be non-negative and less than the size of the collection.</value>
    <comment>索引超出范围。</comment>
  </data>
  <data name="ArgumentWrongType" xml:space="preserve">
    <value>The parameter value is not a valid type.</value>
    <comment>参数值不是有效类型。</comment>
  </data>
  <data name="ArgumentWrongType_Specific" xml:space="preserve">
    <value>The parameter value '{0}' is not of type '{1}'.</value>
    <comment>参数值不是有效类型。</comment>
  </data>
  <data name="ArrayNonZeroLowerBound" xml:space="preserve">
    <value>The lower bound of array must be zero.</value>
    <comment>数组的下限必须为 0。</comment>
  </data>
  <data name="ArrayTooSmall" xml:space="preserve">
    <value>Destination array is not long enough, check array index and length.</value>
    <comment>目标数组太小。</comment>
  </data>
  <data name="BindOpenConstructedMethod" xml:space="preserve">
    <value>Cannot bind to open constructed method.</value>
    <comment>不能绑定到开放构造方法。</comment>
  </data>
  <data name="BindTargetField" xml:space="preserve">
    <value>Cannot bind to the target field because its type is not compatible with that of the delegate type.</value>
    <comment>绑定到目标字段时出错。</comment>
  </data>
  <data name="BindTargetMethod" xml:space="preserve">
    <value>Cannot bind to the target method because its signature is not compatible with that of the delegate type.</value>
    <comment>绑定到目标方法时出错。</comment>
  </data>
  <data name="BindTargetProperty" xml:space="preserve">
    <value>Cannot bind to the target property because its signature is not compatible with that of the delegate type.</value>
    <comment>绑定到目标属性时出错。</comment>
  </data>
  <data name="BindTargetPropertyNoGet" xml:space="preserve">
    <value>Cannot bind to the target property because no get accessor exists.</value>
    <comment>绑定到目标属性时出错。</comment>
  </data>
  <data name="BindTargetPropertyNoSet" xml:space="preserve">
    <value>Cannot bind to the target property because no set accessor exists.</value>
    <comment>绑定到目标属性时出错。</comment>
  </data>
  <data name="CannotCastNullToValueType" xml:space="preserve">
    <value>null cannot be converted to a value type.</value>
    <comment>null 不能转换为值类型。</comment>
  </data>
  <data name="CannotInferenceGenericArguments" xml:space="preserve">
    <value>Can not infer type argument from parameters.</value>
    <comment>无效的泛型参数推断。</comment>
  </data>
  <data name="CollectionCountDiffer" xml:space="preserve">
    <value>Collection element count must be the same as current colection.</value>
    <comment>集合元素数必须与当前集合相同。</comment>
  </data>
  <data name="CollectionEmpty" xml:space="preserve">
    <value>'{0}' may not be empty.</value>
    <comment>集合不能为空。</comment>
  </data>
  <data name="CollectionItemCompareFailed" xml:space="preserve">
    <value>Failed to compare two elements in the collection.</value>
    <comment>比较集合元素失败。</comment>
  </data>
  <data name="CollectionItemNull" xml:space="preserve">
    <value>An element of '{0}' was null.</value>
    <comment>集合中存在 null 元素。</comment>
  </data>
  <data name="DelegateIncompatible" xml:space="preserve">
    <value>Delegate type '{0}' not compatible with '{1}'.</value>
    <comment>委托的类型不兼容。</comment>
  </data>
  <data name="DuplicateName" xml:space="preserve">
    <value>A parameter with the same name has already existed.</value>
    <comment>参数名相同。</comment>
  </data>
  <data name="ExtraJunkAtEnd" xml:space="preserve">
    <value>Additional non-parsable characters are at the end of the string.</value>
    <comment>字符串的末尾有其他无法分析的字符。</comment>
  </data>
  <data name="InvalidBase" xml:space="preserve">
    <value>Base is not between 2 and 36.</value>
    <comment>无效的基。</comment>
  </data>
  <data name="InvalidCast" xml:space="preserve">
    <value>Specified cast is not valid.</value>
    <comment>一种类型不能转换为另一种类型。</comment>
  </data>
  <data name="InvalidCast_FromTo" xml:space="preserve">
    <value>Invalid cast from '{0}' to '{1}'.</value>
    <comment>一种类型不能转换为另一种类型。</comment>
  </data>
  <data name="InvalidElementType" xml:space="preserve">
    <value>Target element type is not compatible with the type of items in the collection.</value>
    <comment>目标元素类型与集合项的类型不兼容。</comment>
  </data>
  <data name="InvalidThreshold" xml:space="preserve">
    <value>The specified threshold is out of range.</value>
    <comment>阈值超出范围。</comment>
  </data>
  <data name="MethodNotSupported" xml:space="preserve">
    <value>Specified method is not supported.</value>
    <comment>方法不被支持。</comment>
  </data>
  <data name="MultidimensionalArrayNotSupported" xml:space="preserve">
    <value>Only single-dimensional arrays are supported.</value>
    <comment>多维数组不被支持。</comment>
  </data>
  <data name="MultidimensionalArrayNotSupported_Param" xml:space="preserve">
    <value>Only single-dimensional arrays are supported of parameter '{0}'.</value>
    <comment>多维数组不被支持。</comment>
  </data>
  <data name="MustBeDelegate" xml:space="preserve">
    <value>Type must derive from Delegate.</value>
    <comment>类型必须从委托派生。</comment>
  </data>
  <data name="MustBeDelegate_Type" xml:space="preserve">
    <value>Type '{0}' must derive from Delegate.</value>
    <comment>类型必须从委托派生。</comment>
  </data>
  <data name="MustBeEnum" xml:space="preserve">
    <value>Type must be an Enum.</value>
    <comment>必须是枚举类型。</comment>
  </data>
  <data name="MustBeEnum_Type" xml:space="preserve">
    <value>Type '{0}' must be an Enum.</value>
    <comment>必须是枚举类型。</comment>
  </data>
  <data name="MustContainValidInfo" xml:space="preserve">
    <value>Must specify valid information for parsing in the string.</value>
    <comment>字符串不包含可用信息。</comment>
  </data>
  <data name="NamedParamTooBig" xml:space="preserve">
    <value>Named parameter array cannot be bigger than argument array.</value>
    <comment>命名参数数组太长。</comment>
  </data>
  <data name="NeedGenericMethodDefinition" xml:space="preserve">
    <value>'{0}' is not a generic method definition.</value>
    <comment>不表示泛型方法定义。</comment>
  </data>
  <data name="NegativeUnsigned" xml:space="preserve">
    <value>The string was being parsed as an unsigned number and could not have a negative sign.</value>
    <comment>无符号数的字符串不能包含负号。</comment>
  </data>
  <data name="NoParsibleDigits" xml:space="preserve">
    <value>Could not find any recognizable digits.</value>
    <comment>未能找到任何可识别的数字。</comment>
  </data>
  <data name="OverflowByte" xml:space="preserve">
    <value>Value was either too large or too small for a Byte.</value>
    <comment>值对于 Byte 太大或太小。</comment>
  </data>
  <data name="OverflowInt16" xml:space="preserve">
    <value>Value was either too large or too small for a Int16.</value>
    <comment>值对于 Int16 太大或太小。</comment>
  </data>
  <data name="OverflowInt32" xml:space="preserve">
    <value>Value was either too large or too small for a Int32.</value>
    <comment>值对于 Int32 太大或太小。</comment>
  </data>
  <data name="OverflowInt64" xml:space="preserve">
    <value>Value was either too large or too small for a Int64.</value>
    <comment>值对于 Int64 太大或太小。</comment>
  </data>
  <data name="OverflowSByte" xml:space="preserve">
    <value>Value was either too large or too small for a SByte.</value>
    <comment>值对于 SByte 太大或太小。</comment>
  </data>
  <data name="OverflowUInt16" xml:space="preserve">
    <value>Value was either too large or too small for a UInt16.</value>
    <comment>值对于 UInt16 太大或太小。</comment>
  </data>
  <data name="OverflowUInt32" xml:space="preserve">
    <value>Value was either too large or too small for a UInt32.</value>
    <comment>值对于 UInt32 太大或太小。</comment>
  </data>
  <data name="OverflowUInt64" xml:space="preserve">
    <value>Value was either too large or too small for a UInt64.</value>
    <comment>值对于 UInt64 太大或太小。</comment>
  </data>
  <data name="PropertyNoGetter" xml:space="preserve">
    <value>Property '{0}' has no get accessor exists.</value>
    <comment>属性不存在 get 访问器。</comment>
  </data>
  <data name="PropertyNoSetter" xml:space="preserve">
    <value>Property '{0}' has no set accessor exists.</value>
    <comment>属性不存在 set 访问器。</comment>
  </data>
  <data name="PropertyOrFieldNotFound" xml:space="preserve">
    <value>Public property or field named '{0}' not exists.</value>
    <comment>找不到公共属性或字段。</comment>
  </data>
  <data name="PropertyOrFieldNotFound_NonPublic" xml:space="preserve">
    <value>Property or field named '{0}' not exists.</value>
    <comment>找不到属性或字段。</comment>
  </data>
  <data name="StreamClosed" xml:space="preserve">
    <value>Cannot read from a closed '{0}'.</value>
    <comment>流已关闭。</comment>
  </data>
  <data name="TypeContainsGenericParameters" xml:space="preserve">
    <value>Type '{0}' contains generic parameters.</value>
    <comment>类型包含泛型参数。</comment>
  </data>
  <data name="TypeMemberNotFound" xml:space="preserve">
    <value>Type member '{0}' not exists.</value>
    <comment>找不到类型成员。</comment>
  </data>
  <data name="TypeMissingDefaultConstructor" xml:space="preserve">
    <value>Type '{0}' does not have a default constructor.</value>
    <comment>类型不包含默认构造函数。</comment>
  </data>
  <data name="UnboundGenParam" xml:space="preserve">
    <value>Late bound operations cannot be performed on types or methods for which ContainsGenericParameters is true.</value>
    <comment>不能对包含未赋值的泛型类型参数的类型和方法进行后期绑定。</comment>
  </data>
  <data name="UniqueValue_Ambig" xml:space="preserve">
    <value>[Ambig]</value>
    <comment>冲突的文本。</comment>
  </data>
  <data name="UniqueValue_Empty" xml:space="preserve">
    <value>[Empty]</value>
    <comment>空的文本。</comment>
  </data>
  <data name="UniqueValue_Unique" xml:space="preserve">
    <value>[Unique {0}]</value>
    <comment>唯一的文本。</comment>
  </data>
</root>